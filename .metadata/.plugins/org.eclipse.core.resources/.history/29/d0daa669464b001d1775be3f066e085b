package com.credibanco.app.Tarjeta.infrastructuta.impl;

import java.sql.Date;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.credibanco.app.Dto.PanDto;
import com.credibanco.app.Dto.RespuestaServicio;
import com.credibanco.app.Dto.RespustaTarjetaDto;
import com.credibanco.app.Dto.TarjetaDto;
import com.credibanco.app.Entidades.Tarjeta;
import com.credibanco.app.Repository.TarjetaRepositoy;
import com.credibanco.app.Repository.interfaces.TarjetaServiceRepository;
import com.credibanco.app.Tarjeta.infrastructuta.ITarjetaService;

@Service("TarjetaService_Impl")
public class TarjetaService_Impl implements ITarjetaService {

	@Autowired
	private TarjetaServiceRepository tarjetaRepositoy;

	@Override
	public RespuestaServicio create(TarjetaDto tarjetaDTO) throws Exception {

		Tarjeta tarjeta = tarjetaDTO.getTarjeta();

		Random aleatorio = new Random(System.currentTimeMillis());

		Integer intAletorio = aleatorio.nextInt(100) + 1;

		tarjeta.setNumerValidacion(intAletorio);
		tarjeta.setEstado("Creada");

		List<Tarjeta> ListTarjeta = tarjetaRepositoy.findByNumerTarjeta(tarjetaDTO.getTarjeta().getNumerTarjeta());

		if (ListTarjeta.get(0).getNumerTarjeta().equals(tarjetaDTO.getTarjeta().getNumerTarjeta())) {

			return new RespuestaServicio("Fallido", "01", false);

		}

		tarjeta = tarjetaRepositoy.save(tarjeta);

		RespustaTarjetaDto respuest = new RespustaTarjetaDto();

		String numero = tarjeta.getNumerTarjeta();
		numero = numero.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");

		respuest.setNumeroTarjeta(numero);
		respuest.setNumeroValidacion(intAletorio);

		return new RespuestaServicio("Exito", "00", respuest);
	}

	@Override
	public RespuestaServicio enrolarTarjeta(RespustaTarjetaDto respustaTarjetaDto) throws Exception {

		List<Tarjeta> ListTarjeta = tarjetaRepositoy.findByNumerTarjeta(respustaTarjetaDto.getNumeroTarjeta());

		if (ListTarjeta.isEmpty()) {
			String numero = respustaTarjetaDto.getNumeroTarjeta();
			numero = numero.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");

			PanDto pan = new PanDto();
			pan.setNumero(numero);
			return new RespuestaServicio("Tarjeta no existe", "01", pan);
		}

		if (ListTarjeta.get(0).getNumerValidacion().equals(respustaTarjetaDto.getNumeroValidacion())) {

			ListTarjeta.get(0).setEstado("Enrolada");

			Tarjeta tarjeta = ListTarjeta.get(0);

			tarjeta = tarjetaRepositoy(tarjeta);
			String numero = respustaTarjetaDto.getNumeroTarjeta();
			numero = numero.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");

			PanDto pan = new PanDto();
			pan.setNumero(numero);
			return new RespuestaServicio("Exito", "00", pan);
		}else {
			
			String numero = respustaTarjetaDto.getNumeroTarjeta();
			numero = numero.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");

			PanDto pan = new PanDto();
			pan.setNumero(numero);
			return new RespuestaServicio("Número de validación inválido", "02", pan);
		}

		
	}

}
